{"ast":null,"code":"var _jsxFileName = \"/Users/sheme/Desktop/literature-review-tool/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook for using auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Auth provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing user on mount\n  useEffect(() => {\n    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n    const userString = localStorage.getItem('user');\n    if (isLoggedIn && userString) {\n      try {\n        const user = JSON.parse(userString);\n        setCurrentUser(user);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        // Clear invalid data\n        localStorage.removeItem('user');\n        localStorage.removeItem('isLoggedIn');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    // In a real app, this would make an API call\n    try {\n      // Mock successful login\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n\n      // Mock user data\n      const user = {\n        id: '123',\n        email,\n        name: email.split('@')[0]\n      };\n\n      // Save to localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Update state\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  // Signup function\n  const signup = async userData => {\n    // In a real app, this would make an API call\n    try {\n      // Mock successful registration\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n\n      // Mock user data\n      const user = {\n        id: '123',\n        email: userData.email,\n        name: `${userData.firstName} ${userData.lastName}`,\n        institution: userData.institution\n      };\n\n      // Save to localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Update state\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('user');\n\n    // Update state\n    setCurrentUser(null);\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    isAuthenticated: !!currentUser,\n    login,\n    signup,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","isLoggedIn","localStorage","getItem","userString","user","JSON","parse","error","console","removeItem","login","email","password","response","fetch","method","headers","body","stringify","ok","errorData","json","Error","message","id","name","split","setItem","signup","userData","firstName","lastName","institution","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sheme/Desktop/literature-review-tool/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create context\nconst AuthContext = createContext();\n\n// Custom hook for using auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing user on mount\n  useEffect(() => {\n    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n    const userString = localStorage.getItem('user');\n    \n    if (isLoggedIn && userString) {\n      try {\n        const user = JSON.parse(userString);\n        setCurrentUser(user);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        // Clear invalid data\n        localStorage.removeItem('user');\n        localStorage.removeItem('isLoggedIn');\n      }\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    // In a real app, this would make an API call\n    try {\n      // Mock successful login\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      \n      // Mock user data\n      const user = {\n        id: '123',\n        email,\n        name: email.split('@')[0]\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Update state\n      setCurrentUser(user);\n      \n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  // Signup function\n  const signup = async (userData) => {\n    // In a real app, this would make an API call\n    try {\n      // Mock successful registration\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      \n      // Mock user data\n      const user = {\n        id: '123',\n        email: userData.email,\n        name: `${userData.firstName} ${userData.lastName}`,\n        institution: userData.institution\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Update state\n      setCurrentUser(user);\n      \n      return user;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('user');\n    \n    // Update state\n    setCurrentUser(null);\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    isAuthenticated: !!currentUser,\n    login,\n    signup,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}