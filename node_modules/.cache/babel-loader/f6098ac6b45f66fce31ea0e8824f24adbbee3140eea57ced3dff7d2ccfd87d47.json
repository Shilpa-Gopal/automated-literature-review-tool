{"ast":null,"code":"// src/services/project.js\nimport { API_BASE_URL } from '../utils/api';\nimport { getToken } from './auth';\n\n/**\n * Project service for managing literature review projects\n */\n\n/**\n * Helper function to make authenticated requests\n * \n * @param {string} endpoint - API endpoint to call\n * @param {Object} options - Fetch options\n * @returns {Promise<Object>} - JSON response\n */\nconst authFetch = async (endpoint, options = {}) => {\n  const token = getToken();\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      ...options.headers\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'API request failed');\n  }\n  return data;\n};\n\n/**\n * Get all projects for the current user\n * \n * @returns {Promise<Array>} - List of projects\n */\nexport const getProjects = async () => {\n  try {\n    const data = await authFetch('/projects');\n    return data.projects;\n  } catch (error) {\n    console.error('Error getting projects:', error);\n    throw error;\n  }\n};\n\n/**\n * Get a specific project by ID\n * \n * @param {number|string} projectId - ID of the project\n * @returns {Promise<Object>} - Project details\n */\nexport const getProject = async projectId => {\n  try {\n    const data = await authFetch(`/projects/${projectId}`);\n    return data.project;\n  } catch (error) {\n    console.error(`Error getting project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Create a new project\n * \n * @param {Object} projectData - Project data\n * @param {string} projectData.name - Project name\n * @param {string} projectData.description - Project description (optional)\n * @returns {Promise<Object>} - Created project\n */\nexport const createProject = async projectData => {\n  try {\n    const data = await authFetch('/projects', {\n      method: 'POST',\n      body: JSON.stringify(projectData)\n    });\n    return data.project;\n  } catch (error) {\n    console.error('Error creating project:', error);\n    throw error;\n  }\n};\n\n/**\n * Update a project\n * \n * @param {number|string} projectId - ID of the project\n * @param {Object} projectData - Updated project data\n * @returns {Promise<Object>} - Updated project\n */\nexport const updateProject = async (projectId, projectData) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: JSON.stringify(projectData)\n    });\n    return data.project;\n  } catch (error) {\n    console.error(`Error updating project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Delete a project\n * \n * @param {number|string} projectId - ID of the project to delete\n * @returns {Promise<Object>} - Deletion response\n */\nexport const deleteProject = async projectId => {\n  try {\n    const data = await authFetch(`/projects/${projectId}`, {\n      method: 'DELETE'\n    });\n    return data;\n  } catch (error) {\n    console.error(`Error deleting project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Upload citation file to a project\n * \n * @param {number|string} projectId - ID of the project\n * @param {File} file - Citation file (CSV or Excel)\n * @returns {Promise<Object>} - Upload response\n */\nexport const uploadCitationFile = async (projectId, file) => {\n  try {\n    const token = getToken();\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await fetch(`${API_BASE_URL}/citations/projects/${projectId}/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: formData\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'File upload failed');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error uploading file to project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update project keywords\n * \n * @param {number|string} projectId - ID of the project\n * @param {Object} keywords - Keywords to update\n * @param {Array<string>} keywords.include_keywords - Keywords that indicate relevance\n * @param {Array<string>} keywords.exclude_keywords - Keywords that indicate irrelevance\n * @returns {Promise<Object>} - Update response\n */\nexport const updateProjectKeywords = async (projectId, keywords) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}/update-keywords`, {\n      method: 'POST',\n      body: JSON.stringify(keywords)\n    });\n    return data;\n  } catch (error) {\n    console.error(`Error updating keywords for project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get project summary\n * \n * @param {number|string} projectId - ID of the project\n * @returns {Promise<Object>} - Project summary\n */\nexport const getProjectSummary = async projectId => {\n  try {\n    const data = await authFetch(`/projects/${projectId}/summary`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting summary for project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Complete a project\n * \n * @param {number|string} projectId - ID of the project\n * @returns {Promise<Object>} - Completion response\n */\nexport const completeProject = async projectId => {\n  try {\n    const data = await authFetch(`/projects/${projectId}/complete`, {\n      method: 'POST'\n    });\n    return data;\n  } catch (error) {\n    console.error(`Error completing project ${projectId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getToken","authFetch","endpoint","options","token","Error","response","fetch","headers","data","json","ok","message","getProjects","projects","error","console","getProject","projectId","project","createProject","projectData","method","body","JSON","stringify","updateProject","deleteProject","uploadCitationFile","file","formData","FormData","append","updateProjectKeywords","keywords","getProjectSummary","completeProject"],"sources":["/Users/sheme/Desktop/literature-review-tool/src/services/projects.js"],"sourcesContent":["// src/services/project.js\nimport { API_BASE_URL } from '../utils/api';\nimport { getToken } from './auth';\n\n/**\n * Project service for managing literature review projects\n */\n\n/**\n * Helper function to make authenticated requests\n * \n * @param {string} endpoint - API endpoint to call\n * @param {Object} options - Fetch options\n * @returns {Promise<Object>} - JSON response\n */\nconst authFetch = async (endpoint, options = {}) => {\n  const token = getToken();\n  \n  if (!token) {\n    throw new Error('Authentication required');\n  }\n  \n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      ...options.headers\n    }\n  });\n  \n  const data = await response.json();\n  \n  if (!response.ok) {\n    throw new Error(data.message || 'API request failed');\n  }\n  \n  return data;\n};\n\n/**\n * Get all projects for the current user\n * \n * @returns {Promise<Array>} - List of projects\n */\nexport const getProjects = async () => {\n  try {\n    const data = await authFetch('/projects');\n    return data.projects;\n  } catch (error) {\n    console.error('Error getting projects:', error);\n    throw error;\n  }\n};\n\n/**\n * Get a specific project by ID\n * \n * @param {number|string} projectId - ID of the project\n * @returns {Promise<Object>} - Project details\n */\nexport const getProject = async (projectId) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}`);\n    return data.project;\n  } catch (error) {\n    console.error(`Error getting project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Create a new project\n * \n * @param {Object} projectData - Project data\n * @param {string} projectData.name - Project name\n * @param {string} projectData.description - Project description (optional)\n * @returns {Promise<Object>} - Created project\n */\nexport const createProject = async (projectData) => {\n  try {\n    const data = await authFetch('/projects', {\n      method: 'POST',\n      body: JSON.stringify(projectData)\n    });\n    \n    return data.project;\n  } catch (error) {\n    console.error('Error creating project:', error);\n    throw error;\n  }\n};\n\n/**\n * Update a project\n * \n * @param {number|string} projectId - ID of the project\n * @param {Object} projectData - Updated project data\n * @returns {Promise<Object>} - Updated project\n */\nexport const updateProject = async (projectId, projectData) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: JSON.stringify(projectData)\n    });\n    \n    return data.project;\n  } catch (error) {\n    console.error(`Error updating project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Delete a project\n * \n * @param {number|string} projectId - ID of the project to delete\n * @returns {Promise<Object>} - Deletion response\n */\nexport const deleteProject = async (projectId) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}`, {\n      method: 'DELETE'\n    });\n    \n    return data;\n  } catch (error) {\n    console.error(`Error deleting project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Upload citation file to a project\n * \n * @param {number|string} projectId - ID of the project\n * @param {File} file - Citation file (CSV or Excel)\n * @returns {Promise<Object>} - Upload response\n */\nexport const uploadCitationFile = async (projectId, file) => {\n  try {\n    const token = getToken();\n    \n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    \n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await fetch(`${API_BASE_URL}/citations/projects/${projectId}/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: formData\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'File upload failed');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error uploading file to project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update project keywords\n * \n * @param {number|string} projectId - ID of the project\n * @param {Object} keywords - Keywords to update\n * @param {Array<string>} keywords.include_keywords - Keywords that indicate relevance\n * @param {Array<string>} keywords.exclude_keywords - Keywords that indicate irrelevance\n * @returns {Promise<Object>} - Update response\n */\nexport const updateProjectKeywords = async (projectId, keywords) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}/update-keywords`, {\n      method: 'POST',\n      body: JSON.stringify(keywords)\n    });\n    \n    return data;\n  } catch (error) {\n    console.error(`Error updating keywords for project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get project summary\n * \n * @param {number|string} projectId - ID of the project\n * @returns {Promise<Object>} - Project summary\n */\nexport const getProjectSummary = async (projectId) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}/summary`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting summary for project ${projectId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Complete a project\n * \n * @param {number|string} projectId - ID of the project\n * @returns {Promise<Object>} - Completion response\n */\nexport const completeProject = async (projectId) => {\n  try {\n    const data = await authFetch(`/projects/${projectId}/complete`, {\n      method: 'POST'\n    });\n    \n    return data;\n  } catch (error) {\n    console.error(`Error completing project ${projectId}:`, error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}