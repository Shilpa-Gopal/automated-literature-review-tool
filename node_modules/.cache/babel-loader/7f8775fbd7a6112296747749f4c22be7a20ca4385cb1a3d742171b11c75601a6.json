{"ast":null,"code":"// src/services/auth.js\nimport { API_BASE_URL } from '../utils/api';\n\n/**\n * Authentication service for handling user authentication operations\n */\n\n/**\n * Register a new user\n * \n * @param {Object} userData - User registration data\n * @param {string} userData.firstName - User's first name\n * @param {string} userData.lastName - User's last name\n * @param {string} userData.email - User's email\n * @param {string} userData.password - User's password\n * @param {string} userData.institution - User's institution (optional)\n * @returns {Promise<Object>} - Response from the server\n */\nexport const register = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n/**\n * Log in a user\n * \n * @param {Object} credentials - User login credentials\n * @param {string} credentials.email - User's email\n * @param {string} credentials.password - User's password\n * @returns {Promise<Object>} - Response from the server including auth token\n */\nexport const login = async credentials => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\n * Log out the current user\n * Removes token from local storage\n */\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  localStorage.removeItem('isLoggedIn');\n};\n\n/**\n * Get the current authenticated user's profile\n * \n * @returns {Promise<Object>} - User profile data\n */\nexport const getCurrentUser = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to get user profile');\n    }\n    return data.user;\n  } catch (error) {\n    console.error('Get user profile error:', error);\n    throw error;\n  }\n};\n\n/**\n * Update the current user's profile\n * \n * @param {Object} userData - Updated user data\n * @returns {Promise<Object>} - Updated user profile\n */\nexport const updateProfile = async userData => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to update profile');\n    }\n    return data.user;\n  } catch (error) {\n    console.error('Update profile error:', error);\n    throw error;\n  }\n};\n\n/**\n * Change the user's password\n * \n * @param {Object} passwordData - Password change data\n * @param {string} passwordData.currentPassword - Current password\n * @param {string} passwordData.newPassword - New password\n * @returns {Promise<Object>} - Response from the server\n */\nexport const changePassword = async passwordData => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    const response = await fetch(`${API_BASE_URL}/auth/change-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(passwordData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to change password');\n    }\n    return data;\n  } catch (error) {\n    console.error('Change password error:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if the user is authenticated\n * \n * @returns {boolean} - True if user is authenticated\n */\nexport const isAuthenticated = () => {\n  return localStorage.getItem('isLoggedIn') === 'true' && !!localStorage.getItem('token');\n};\n\n/**\n * Get the authentication token\n * \n * @returns {string|null} - Authentication token or null if not authenticated\n */\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};","map":{"version":3,"names":["API_BASE_URL","register","userData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","error","console","login","credentials","logout","localStorage","removeItem","getCurrentUser","token","getItem","user","updateProfile","changePassword","passwordData","isAuthenticated","getToken"],"sources":["/Users/sheme/Desktop/literature-review-tool/src/services/auth.js"],"sourcesContent":["// src/services/auth.js\nimport { API_BASE_URL } from '../utils/api';\n\n/**\n * Authentication service for handling user authentication operations\n */\n\n/**\n * Register a new user\n * \n * @param {Object} userData - User registration data\n * @param {string} userData.firstName - User's first name\n * @param {string} userData.lastName - User's last name\n * @param {string} userData.email - User's email\n * @param {string} userData.password - User's password\n * @param {string} userData.institution - User's institution (optional)\n * @returns {Promise<Object>} - Response from the server\n */\nexport const register = async (userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData)\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n/**\n * Log in a user\n * \n * @param {Object} credentials - User login credentials\n * @param {string} credentials.email - User's email\n * @param {string} credentials.password - User's password\n * @returns {Promise<Object>} - Response from the server including auth token\n */\nexport const login = async (credentials) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials)\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\n * Log out the current user\n * Removes token from local storage\n */\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  localStorage.removeItem('isLoggedIn');\n};\n\n/**\n * Get the current authenticated user's profile\n * \n * @returns {Promise<Object>} - User profile data\n */\nexport const getCurrentUser = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to get user profile');\n    }\n\n    return data.user;\n  } catch (error) {\n    console.error('Get user profile error:', error);\n    throw error;\n  }\n};\n\n/**\n * Update the current user's profile\n * \n * @param {Object} userData - Updated user data\n * @returns {Promise<Object>} - Updated user profile\n */\nexport const updateProfile = async (userData) => {\n  try {\n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(userData)\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to update profile');\n    }\n\n    return data.user;\n  } catch (error) {\n    console.error('Update profile error:', error);\n    throw error;\n  }\n};\n\n/**\n * Change the user's password\n * \n * @param {Object} passwordData - Password change data\n * @param {string} passwordData.currentPassword - Current password\n * @param {string} passwordData.newPassword - New password\n * @returns {Promise<Object>} - Response from the server\n */\nexport const changePassword = async (passwordData) => {\n  try {\n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/auth/change-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(passwordData)\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to change password');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Change password error:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if the user is authenticated\n * \n * @returns {boolean} - True if user is authenticated\n */\nexport const isAuthenticated = () => {\n  return localStorage.getItem('isLoggedIn') === 'true' && !!localStorage.getItem('token');\n};\n\n/**\n * Get the authentication token\n * \n * @returns {string|null} - Authentication token or null if not authenticated\n */\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}