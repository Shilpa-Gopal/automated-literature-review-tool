{"ast":null,"code":"// src/utils/api.js\n\n// API base URL - read from environment or use default\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n/**\n * Make an API request with appropriate error handling\n * \n * @param {string} endpoint - API endpoint (without base URL)\n * @param {Object} options - Fetch options\n * @returns {Promise<any>} - Parsed JSON response\n */\nexport const apiRequest = async (endpoint, options = {}) => {\n  try {\n    // Get auth token if available\n    const token = localStorage.getItem('token');\n\n    // Set up headers\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n\n    // Add authorization header if token exists\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Construct full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    // Log request in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Request: ${options.method || 'GET'} ${url}`);\n    }\n\n    // Make the request\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n\n    // Parse response as JSON\n    let data;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      // Handle non-JSON responses\n      const text = await response.text();\n      data = {\n        message: text\n      };\n    }\n\n    // Handle error responses\n    if (!response.ok) {\n      throw new Error(data.message || response.statusText || 'API request failed');\n    }\n    return data;\n  } catch (error) {\n    // Log error in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('API request failed:', error);\n    }\n\n    // Handle authentication errors\n    if (error.message.includes('Authentication required') || error.message.includes('token expired') || error.message.includes('Invalid token')) {\n      // Clear authentication state\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('isLoggedIn');\n\n      // Redirect to login page\n      window.location.href = '/login';\n    }\n    throw error;\n  }\n};\n\n/**\n * Upload a file to the API\n * \n * @param {string} endpoint - API endpoint\n * @param {File} file - File to upload\n * @param {Object} additionalFormData - Additional form data to include\n * @param {Object} options - Additional fetch options\n * @returns {Promise<any>} - Response data\n */\nexport const uploadFile = async (endpoint, file, additionalFormData = {}, options = {}) => {\n  try {\n    // Get auth token if available\n    const token = localStorage.getItem('token');\n\n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add any additional form data\n    Object.entries(additionalFormData).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n\n    // Set up headers (without Content-Type as it's set automatically for FormData)\n    const headers = {\n      ...options.headers\n    };\n\n    // Add authorization header if token exists\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Construct full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    // Make the request\n    const response = await fetch(url, {\n      method: 'POST',\n      body: formData,\n      headers,\n      ...options\n    });\n\n    // Parse response\n    let data;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      const text = await response.text();\n      data = {\n        message: text\n      };\n    }\n\n    // Handle error responses\n    if (!response.ok) {\n      throw new Error(data.message || response.statusText || 'File upload failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('File upload failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Download a file from the API\n * \n * @param {string} endpoint - API endpoint\n * @param {string} filename - Filename to save as\n * @param {Object} options - Additional fetch options\n */\nexport const downloadFile = async (endpoint, filename, options = {}) => {\n  try {\n    // Get auth token if available\n    const token = localStorage.getItem('token');\n\n    // Set up headers\n    const headers = {\n      ...options.headers\n    };\n\n    // Add authorization header if token exists\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Construct full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    // Make the request\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n\n    // Handle error responses\n    if (!response.ok) {\n      let errorMessage;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.message;\n      } catch (e) {\n        errorMessage = response.statusText || 'File download failed';\n      }\n      throw new Error(errorMessage);\n    }\n\n    // Get the blob data\n    const blob = await response.blob();\n\n    // Create a download link\n    const downloadUrl = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = filename;\n\n    // Append to the document, click, and remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Clean up the URL object\n    window.URL.revokeObjectURL(downloadUrl);\n  } catch (error) {\n    console.error('File download failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","token","localStorage","getItem","headers","url","NODE_ENV","console","log","method","response","fetch","data","contentType","get","includes","json","text","message","ok","Error","statusText","error","removeItem","window","location","href","uploadFile","file","additionalFormData","formData","FormData","append","Object","entries","forEach","key","value","body","downloadFile","filename","errorMessage","errorData","e","blob","downloadUrl","URL","createObjectURL","link","document","createElement","download","appendChild","click","removeChild","revokeObjectURL"],"sources":["/Users/sheme/Desktop/literature-review-tool/src/utils/api.js"],"sourcesContent":["// src/utils/api.js\n\n// API base URL - read from environment or use default\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n/**\n * Make an API request with appropriate error handling\n * \n * @param {string} endpoint - API endpoint (without base URL)\n * @param {Object} options - Fetch options\n * @returns {Promise<any>} - Parsed JSON response\n */\nexport const apiRequest = async (endpoint, options = {}) => {\n  try {\n    // Get auth token if available\n    const token = localStorage.getItem('token');\n    \n    // Set up headers\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    \n    // Add authorization header if token exists\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // Construct full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    // Log request in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Request: ${options.method || 'GET'} ${url}`);\n    }\n    \n    // Make the request\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n    \n    // Parse response as JSON\n    let data;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      // Handle non-JSON responses\n      const text = await response.text();\n      data = { message: text };\n    }\n    \n    // Handle error responses\n    if (!response.ok) {\n      throw new Error(data.message || response.statusText || 'API request failed');\n    }\n    \n    return data;\n  } catch (error) {\n    // Log error in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('API request failed:', error);\n    }\n    \n    // Handle authentication errors\n    if (error.message.includes('Authentication required') || \n        error.message.includes('token expired') ||\n        error.message.includes('Invalid token')) {\n      // Clear authentication state\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('isLoggedIn');\n      \n      // Redirect to login page\n      window.location.href = '/login';\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Upload a file to the API\n * \n * @param {string} endpoint - API endpoint\n * @param {File} file - File to upload\n * @param {Object} additionalFormData - Additional form data to include\n * @param {Object} options - Additional fetch options\n * @returns {Promise<any>} - Response data\n */\nexport const uploadFile = async (endpoint, file, additionalFormData = {}, options = {}) => {\n  try {\n    // Get auth token if available\n    const token = localStorage.getItem('token');\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Add any additional form data\n    Object.entries(additionalFormData).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    \n    // Set up headers (without Content-Type as it's set automatically for FormData)\n    const headers = { ...options.headers };\n    \n    // Add authorization header if token exists\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // Construct full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    // Make the request\n    const response = await fetch(url, {\n      method: 'POST',\n      body: formData,\n      headers,\n      ...options\n    });\n    \n    // Parse response\n    let data;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      const text = await response.text();\n      data = { message: text };\n    }\n    \n    // Handle error responses\n    if (!response.ok) {\n      throw new Error(data.message || response.statusText || 'File upload failed');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('File upload failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Download a file from the API\n * \n * @param {string} endpoint - API endpoint\n * @param {string} filename - Filename to save as\n * @param {Object} options - Additional fetch options\n */\nexport const downloadFile = async (endpoint, filename, options = {}) => {\n  try {\n    // Get auth token if available\n    const token = localStorage.getItem('token');\n    \n    // Set up headers\n    const headers = { ...options.headers };\n    \n    // Add authorization header if token exists\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // Construct full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    // Make the request\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n    \n    // Handle error responses\n    if (!response.ok) {\n      let errorMessage;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.message;\n      } catch (e) {\n        errorMessage = response.statusText || 'File download failed';\n      }\n      throw new Error(errorMessage);\n    }\n    \n    // Get the blob data\n    const blob = await response.blob();\n    \n    // Create a download link\n    const downloadUrl = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = filename;\n    \n    // Append to the document, click, and remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // Clean up the URL object\n    window.URL.revokeObjectURL(downloadUrl);\n  } catch (error) {\n    console.error('File download failed:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAExF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC1D,IAAI;IACF;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,MAAMC,OAAO,GAAG;MACd,cAAc,EAAE,kBAAkB;MAClC,GAAGJ,OAAO,CAACI;IACb,CAAC;;IAED;IACA,IAAIH,KAAK,EAAE;MACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;IAC9C;;IAEA;IACA,MAAMI,GAAG,GAAG,GAAGX,YAAY,GAAGK,QAAQ,EAAE;;IAExC;IACA,IAAIJ,OAAO,CAACC,GAAG,CAACU,QAAQ,KAAK,aAAa,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgBR,OAAO,CAACS,MAAM,IAAI,KAAK,IAAIJ,GAAG,EAAE,CAAC;IAC/D;;IAEA;IACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;MAChC,GAAGL,OAAO;MACVI;IACF,CAAC,CAAC;;IAEF;IACA,IAAIQ,IAAI;IACR,MAAMC,WAAW,GAAGH,QAAQ,CAACN,OAAO,CAACU,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DH,IAAI,GAAG,MAAMF,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCL,IAAI,GAAG;QAAEM,OAAO,EAAED;MAAK,CAAC;IAC1B;;IAEA;IACA,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACR,IAAI,CAACM,OAAO,IAAIR,QAAQ,CAACW,UAAU,IAAI,oBAAoB,CAAC;IAC9E;IAEA,OAAOT,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd;IACA,IAAI3B,OAAO,CAACC,GAAG,CAACU,QAAQ,KAAK,aAAa,EAAE;MAC1CC,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;;IAEA;IACA,IAAIA,KAAK,CAACJ,OAAO,CAACH,QAAQ,CAAC,yBAAyB,CAAC,IACjDO,KAAK,CAACJ,OAAO,CAACH,QAAQ,CAAC,eAAe,CAAC,IACvCO,KAAK,CAACJ,OAAO,CAACH,QAAQ,CAAC,eAAe,CAAC,EAAE;MAC3C;MACAb,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;MAChCrB,YAAY,CAACqB,UAAU,CAAC,MAAM,CAAC;MAC/BrB,YAAY,CAACqB,UAAU,CAAC,YAAY,CAAC;;MAErC;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;IAEA,MAAMJ,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,UAAU,GAAG,MAAAA,CAAO5B,QAAQ,EAAE6B,IAAI,EAAEC,kBAAkB,GAAG,CAAC,CAAC,EAAE7B,OAAO,GAAG,CAAC,CAAC,KAAK;EACzF,IAAI;IACF;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,MAAM2B,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;;IAE7B;IACAK,MAAM,CAACC,OAAO,CAACL,kBAAkB,CAAC,CAACM,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MAC3DP,QAAQ,CAACE,MAAM,CAACI,GAAG,EAAEC,KAAK,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,MAAMjC,OAAO,GAAG;MAAE,GAAGJ,OAAO,CAACI;IAAQ,CAAC;;IAEtC;IACA,IAAIH,KAAK,EAAE;MACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;IAC9C;;IAEA;IACA,MAAMI,GAAG,GAAG,GAAGX,YAAY,GAAGK,QAAQ,EAAE;;IAExC;IACA,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;MAChCI,MAAM,EAAE,MAAM;MACd6B,IAAI,EAAER,QAAQ;MACd1B,OAAO;MACP,GAAGJ;IACL,CAAC,CAAC;;IAEF;IACA,IAAIY,IAAI;IACR,MAAMC,WAAW,GAAGH,QAAQ,CAACN,OAAO,CAACU,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DH,IAAI,GAAG,MAAMF,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCL,IAAI,GAAG;QAAEM,OAAO,EAAED;MAAK,CAAC;IAC1B;;IAEA;IACA,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACR,IAAI,CAACM,OAAO,IAAIR,QAAQ,CAACW,UAAU,IAAI,oBAAoB,CAAC;IAC9E;IAEA,OAAOT,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,YAAY,GAAG,MAAAA,CAAOxC,QAAQ,EAAEyC,QAAQ,EAAExC,OAAO,GAAG,CAAC,CAAC,KAAK;EACtE,IAAI;IACF;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,MAAMC,OAAO,GAAG;MAAE,GAAGJ,OAAO,CAACI;IAAQ,CAAC;;IAEtC;IACA,IAAIH,KAAK,EAAE;MACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;IAC9C;;IAEA;IACA,MAAMI,GAAG,GAAG,GAAGX,YAAY,GAAGK,QAAQ,EAAE;;IAExC;IACA,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;MAChC,GAAGL,OAAO;MACVI;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACM,QAAQ,CAACS,EAAE,EAAE;MAChB,IAAIsB,YAAY;MAChB,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMhC,QAAQ,CAACM,IAAI,CAAC,CAAC;QACvCyB,YAAY,GAAGC,SAAS,CAACxB,OAAO;MAClC,CAAC,CAAC,OAAOyB,CAAC,EAAE;QACVF,YAAY,GAAG/B,QAAQ,CAACW,UAAU,IAAI,sBAAsB;MAC9D;MACA,MAAM,IAAID,KAAK,CAACqB,YAAY,CAAC;IAC/B;;IAEA;IACA,MAAMG,IAAI,GAAG,MAAMlC,QAAQ,CAACkC,IAAI,CAAC,CAAC;;IAElC;IACA,MAAMC,WAAW,GAAGrB,MAAM,CAACsB,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;IACpD,MAAMI,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACtB,IAAI,GAAGmB,WAAW;IACvBG,IAAI,CAACG,QAAQ,GAAGX,QAAQ;;IAExB;IACAS,QAAQ,CAACX,IAAI,CAACc,WAAW,CAACJ,IAAI,CAAC;IAC/BA,IAAI,CAACK,KAAK,CAAC,CAAC;IACZJ,QAAQ,CAACX,IAAI,CAACgB,WAAW,CAACN,IAAI,CAAC;;IAE/B;IACAxB,MAAM,CAACsB,GAAG,CAACS,eAAe,CAACV,WAAW,CAAC;EACzC,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}